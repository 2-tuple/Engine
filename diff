diff --git a/resource_manager.cpp b/resource_manager.cpp
index 0e985d5..223b82b 100644
--- a/resource_manager.cpp
+++ b/resource_manager.cpp
@@ -25,7 +25,7 @@ namespace Resource
       }
       else
       {
-        debug_read_file_result AssetReadResult = ReadEntireFile(&this->ModelStack, Path);
+        debug_read_file_result AssetReadResult = ReadEntireFile(&this->ModelHeap, Path);
 
         assert(AssetReadResult.Contents);
         if(AssetReadResult.ContentsSize <= 0)
@@ -74,11 +74,11 @@ namespace Resource
     {
       if(Animation)
       {
-        assert(0 && "Reloading model");
+        assert(0 && "Reloading animation");
       }
       else
       {
-        debug_read_file_result AssetReadResult = ReadEntireFile(&this->AnimationStack, Path);
+        debug_read_file_result AssetReadResult = ReadEntireFile(&this->AnimationHeap, Path);
 
         assert(AssetReadResult.Contents);
         if(AssetReadResult.ContentsSize <= 0)
@@ -162,7 +162,7 @@ namespace Resource
         }
       }
     }
-    this->Textures.Clear();
+    this->Textures.Reset();
   }
 
   void
@@ -170,35 +170,59 @@ namespace Resource
   {
     for(int i = 0; i < RESOURCE_MAX_COUNT; i++)
     {
-      Render::model* Model;
-      char*          Path;
-      if(this->Models.Get({ i + 1 }, &Model, &Path))
+      this->FreeModel({ i + 1 });
+    }
+    this->Models.Reset();
+    this->ModelHeap.Clear();
+  }
+
+  void
+  resource_manager::FreeModel(rid RID)
+  {
+    Render::model* Model;
+    char*          Path;
+    if(this->Models.Get(RID, &Model, &Path))
+    {
+      if(Model)
       {
-        if(Model)
+        for(int m = 0; m < Model->MeshCount; m++)
         {
-          for(int m = 0; m < Model->MeshCount; m++)
-          {
-            Render::CleanUpMesh(Model->Meshes[m]);
-          }
+          Render::CleanUpMesh(Model->Meshes[m]);
         }
+        this->ModelHeap.Dealloc((uint8_t*)Model);
+        this->Models.SetAsset(RID, NULL);
+      }
+    }
+  }
+
+  void
+  resource_manager::FreeAnimation(rid RID)
+  {
+    Anim::animation* Animation;
+    char*            Path;
+    if(this->Animations.Get(RID, &Animation, &Path))
+    {
+      if(Animation)
+      {
+        this->AnimationHeap.Dealloc((uint8_t*)Animation);
+        this->Animations.SetAsset(RID, NULL);
       }
     }
-    this->Models.Clear();
-    this->ModelStack.NullifyClear();
   }
 
   void
   resource_manager::WipeAllMaterialData()
   {
-    this->Materials.Clear();
+    this->Materials.Reset();
     this->MaterialStack.NullifyClear();
   }
 
   void
   resource_manager::WipeAllAnimationData()
   {
-    this->Animations.Clear();
-    this->AnimationStack.NullifyClear();
+    this->Animations.Reset();
+    this->AnimationHeap.Clear();
+    // this->AnimationStack.NullifyClear();
   }
 
 #define _STRING(X) #X
@@ -270,7 +294,7 @@ namespace Resource
       }                                                                                            \
       else                                                                                         \
       {                                                                                            \
-        printf("%-10s %-10s: rid %d, %s\n", "seeking", _STRING(TYPE_NAME), RID.Value, Path);       \
+        /*printf("%-10s %-10s: rid %d, %s\n", "seeking", _STRING(TYPE_NAME), RID.Value, Path);*/   \
         if(this->Load##TYPE_NAME(RID))                                                             \
         {                                                                                          \
           this->TYPE_NAME##s.Get(RID, &TYPE_NAME, &Path);                                          \
@@ -324,44 +348,68 @@ namespace Resource
   resource_manager::UpdateHardDriveAssetPathLists()
   {
     // Update models paths
-    int DiffCount = ReadPaths(this->DiffedAssets, this->ModelPaths, this->ModelStats,
-                              &this->ModelPathCount, "data/built", NULL);
+    this->DiffedModelCount = ReadPaths(this->DiffedModels, this->ModelPaths, this->ModelStats,
+                                       &this->ModelPathCount, "data/built", NULL);
     // Update texture paths
-    DiffCount = ReadPaths(this->DiffedAssets, this->TexturePaths, this->TextureStats,
-                          &this->TexturePathCount, "data/textures", NULL);
+    this->DiffedTextureCount =
+      ReadPaths(this->DiffedTextures, this->TexturePaths, this->TextureStats,
+                &this->TexturePathCount, "data/textures", NULL);
     // Update animation paths
-    DiffCount = ReadPaths(this->DiffedAssets, this->AnimationPaths, this->AnimationStats,
-                          &this->AnimationPathCount, "data/animations", "anim");
+    this->DiffedAnimationCount =
+      ReadPaths(this->DiffedAnimations, this->AnimationPaths, this->AnimationStats,
+                &this->AnimationPathCount, "data/animations", "anim");
     // Update material paths
-    DiffCount = ReadPaths(this->DiffedAssets, this->MaterialPaths, this->MaterialStats,
-                          &this->MaterialPathCount, "data/materials", "mat");
-#define LOG_HARD_DRIVE_CHANGES 0
-#if LOG_HARD_DRIVE_CHANGES
-    if(DiffCount > 0)
+    this->DiffedMaterialCount =
+      ReadPaths(this->DiffedMaterials, this->MaterialPaths, this->MaterialStats,
+                &this->MaterialPathCount, "data/materials", "mat");
+  }
+
+  void
+  resource_manager::ReloadModified()
+  {
+    for(int i = 0; i < this->DiffedModelCount; i++)
     {
-      printf("DIFF COUNT: %d\n", DiffCount);
-      for(int i = 0; i < DiffCount; i++)
+      if(this->DiffedModels[i].Type == DIFF_Modified)
       {
-        switch(this->DiffedAssets[i].Type)
+        printf("Reloading: %s\n", DiffedModels[i].Path.Name);
+        rid RID;
+        if(this->Models.GetPathRID(&RID, DiffedModels[i].Path.Name))
         {
-          case DIFF_Added:
-            printf("Added: ");
-            break;
-          case DIFF_Modified:
-            printf("Modified: ");
-            break;
-          case DIFF_Deleted:
-            printf("Deleted: ");
-            break;
-          default:
-            assert(0 && "assert: overflowed stat enum");
-            break;
+          Render::model* Model;
+          char*          Path;
+          if(this->Models.Get(RID, &Model, &Path))
+          {
+            if(Model)
+            {
+              FreeModel(RID);
+              LoadModel(RID);
+            }
+          }
+        }
+      }
+
+      for(int i = 0; i < this->DiffedModelCount; i++)
+      {
+        if(this->DiffedAnimations[i].Type == DIFF_Modified)
+        {
+          printf("Reloading: %s\n", DiffedAnimations[i].Path.Name);
+          rid RID;
+          if(this->Animations.GetPathRID(&RID, DiffedAnimations[i].Path.Name))
+          {
+            Anim::animation* Animation;
+            char*            Path;
+            if(this->Animations.Get(RID, &Animation, &Path))
+            {
+              if(Animation)
+              {
+                FreeAnimation(RID);
+                LoadAnimation(RID);
+              }
+            }
+          }
         }
-        printf("%s\n", DiffedAssets[i].Path.Name);
       }
     }
-#endif
-#undef LOG_HARD_DRIVE_CHANGES
   }
 }
 
